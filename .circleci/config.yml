# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      - image: circleci/python:3.6.1
    working_directory: ~/repo
    steps:
      #- run:
      #    name: Setup Git-LFS
      #    command: |
      #        curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
      #        sudo apt-get update
      #        sudo apt-get install -y git-lfs
      #        sudo git lfs install             
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "oss/requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            cd oss
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - setup_remote_docker
      - run:
          name: Copy files into remote container and run
          command: |
            set -x
            #git submodule init
            #git submodule update # uses circleci_rsa ssh key to access private repo
            IMAGE_NAME=grafana/grafana-oss-msi-generator
            VERSION=v1
            docker build -t ${IMAGE_NAME}:latest -t ${IMAGE_NAME}:${VERSION} --no-cache=true oss/docker
            docker create -v /master --name master alpine:3.8 /bin/true
            ls -al
            pwd
            docker cp master master:/master
            docker cp oss master:/master
            docker run --volumes-from master --name msibuilder ${IMAGE_NAME}:${VERSION} python3 /master/oss/generator/build.py --build 5.4.3
            #docker run --volumes-from master --name msibuilder ${IMAGE_NAME}:${VERSION} ls -al /master
            docker cp msibuilder:/master/master/oss/scratch artifacts
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "oss/requirements.txt" }}
        
      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      #- run:
      #    name: run tests
      #    command: |
      #      . venv/bin/activate
      #      cd master
      #      python manage.py test
      - store_artifacts:
          path: artifacts
          destination: builds

      - store_artifacts:
          path: test-reports
          destination: test-reports
